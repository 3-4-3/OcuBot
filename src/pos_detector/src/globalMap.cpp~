/** 
 * 	
 *	Code used for publising a map frame
 *	
 *	It has a different angle of the global frame (big marker)
 *	and same position to make it easier to create the oculus scene.
 */
#include "ros/ros.h"
#include <tf/transform_broadcaster.h>

#include <sstream>






	tf::Vector3 origin;
  	origin.setValue(T.at<double>(0,0),T.at<double>(1,0),T.at<double>(2,0));

  	tf::Matrix3x3 tf3d;
  	tf3d.setValue(R.at<double>(0,0), R.at<double>(0,1), R.at<double>(0,2), 
        		R.at<double>(1,0), R.at<double>(1,1), R.at<double>(1,2), 
        		R.at<double>(2,0), R.at<double>(2,1), R.at<double>(2,2));

  	tf::Quaternion tfqt;
  	tf3d.getRotation(tfqt);

  	transformCam.setOrigin(origin);
  	transformCam.setRotation(tfqt);


		tf::Vector3 origin;
  		origin.setValue(mean_Hom.at<float>(0,0),mean_Hom.at<float>(0,1),mean_Hom.at<float>(0,2));
		transformMark.setOrigin(origin);
		
		// ROTATION
		tf::Vector3 cameraDirection;
		cameraDirection.setValue(0,0,1);

		tf::Vector3 right_markD_vector = markDirection.cross(cameraDirection);
		right_markD_vector.normalized();
		double theta = markDirection.dot(cameraDirection);
		double angle_rotation = -1.0*acos(theta);




/**
 * Main method for initialice the ROS node
 */
int main(int argc, char **argv)
{
  	ros::init(argc, argv, "ubotcontrol");

  	ros::NodeHandle n;

	hRosNode = new ros::NodeHandle();

	static tf::TransformBroadcaster br;
	
	// For publishing the position of the global frame
        tf::Transform transformGlobal;

  	ros::Rate loop_rate(25); // Number in hz

	tf::Vector3 origin = Vecto3::ZERO;
	tf::Quaternion tfqt = Quaternion(Degree(90), Vextor3::UNI_X);

	transformGlobal.setOrigin(origin);
	transformGlobal.setRotation(tfqt);

  while (ros::ok())
  {
    
    ros::spinOnce();

    

    // Send position of cameras
    br.sendTransform(tf::StampedTransform(transformGlobal, ros::Time::now(), "global", "map"));
    

    loop_rate.sleep();
  }


  return 0;
}



